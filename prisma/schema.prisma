generator client {
  provider = "prisma-client-js"
}

enum Season {
  SUMMER
  WINTER
  ALLSEASON
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Brand {
  id          Int      @id @default(autoincrement())
  slug        String   @unique @db.VarChar(100)
  name        String
  logo        String?
  description String? @db.Text
  website     String?
  country     String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt     @map("updated_at")

  models      Model[]
  tyres       Tyre[]   @relation("BrandTyres")

  @@map("brands")
}

model Tyre {
  id                 Int      @id(map: "tires_pkey") @default(autoincrement())
  slug               String   @unique @db.VarChar(160)
  title              String
  sku                String   @unique(map: "tires_sku_key") @db.VarChar(50)
  description        String?
  price              Float    @default(0)
  inventoryQuantity  Int?     @default(0)            @map("inventory_quantity")
  country            String?  @db.VarChar(50)
  dateCode           String?  @db.Char(4)            @map("date_code")
  applicability      String?  @db.VarChar(50)
  loadSpeedIndex     String?  @db.VarChar(10)        @map("load_speed_index")
  loadIndex          String?  @db.VarChar(10)        @map("load_index")
  speedIndex         String?  @db.Char(1)            @map("speed_index")
  season             Season?
  type               String?  @db.VarChar(50)
  constr             String?  @db.Char(1)
  delimiter          String?  @db.Char(1)
  width              Decimal? @db.Decimal(4, 1)
  profile            Decimal? @db.Decimal(4, 1)
  diameter           Decimal? @db.Decimal(4, 1)
  brandId            Int?     @map("brand_id")
  modelId            Int?     @map("model_id")
  brand              Brand?   @relation("BrandTyres", fields: [brandId], references: [id])
  model              Model?   @relation(fields: [modelId], references: [id])

  @@index([title(ops: raw("gin_trgm_ops"))], map: "tyres_title_trgm_idx", type: Gin)
  @@index([brandId, modelId]) 
  @@index([width, profile, diameter]) 
  
  @@map("tyres")
}

model Model {
  id          Int          @id @default(autoincrement())
  slug        String       @unique @db.VarChar(200)
  name        String
  description String?      @db.Text
  brandId     Int          @map("brand_id")
  brand       Brand        @relation(fields: [brandId], references: [id], onDelete: Cascade)
  season      Season?
  tyres       Tyre[]
  images      ModelImage[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt     @map("updated_at")

  @@index([brandId])
  @@map("models")
}

model Message {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String?
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt     @map("updated_at")

  @@map("messages")
}

model ModelImage {
  id       Int     @id @default(autoincrement())
  modelId  Int     @map("model_id")
  model    Model   @relation(fields: [modelId], references: [id], onDelete: Restrict)
  url      String
  alt      String?
  width    Int?
  height   Int?
  position Int     @default(0)

  @@map("model_images")
}

model ContentBlock {
  id      Int    @id @default(autoincrement())
  key     String @unique
  value   Json   @db.JsonB

  @@map("content_blocks")
}
