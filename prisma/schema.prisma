generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Brand {
  id          Int      @id @default(autoincrement())
  slug        String   @unique @db.VarChar(100)
  name        String
  logo        String?
  description String?
  website     String?
  country     String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @default(now()) @map("updated_at")
  models      Model[]
  tyres       Tyre[]

  @@map("brands")
}

model Tyre {

  id                Int     @id(map: "tires_pkey") @default(autoincrement())
  externalId String?  @db.Uuid @map("external_id")// 1с ід
  sku               String  @unique @db.VarChar(50) //у 1с = code
  slug              String  @default("")

  modelId           Int?    @map("model_id")
  brandId           Int?    @map("brand_id")

  title             String
  description       String?
  country           String? @db.VarChar(50)
  dateCode          String? @map("date_code") @db.Char(4)
  applicability     String? @db.VarChar(50)
  inventoryQuantity Int?    @default(0) @map("inventory_quantity")
  price             Float
  loadSpeedIndex    String? @map("load_speed_index") @db.VarChar(10)
  brand             String? @db.VarChar(50)
  model             String? @db.VarChar(100)
  width             Float?  @db.Real
  profile           Float?  @db.Real
  constr            String? @db.Char(1)
  diameter          Float?  @db.Real
  delimiter         String? @db.Char(1)
  loadIndex         String? @map("load_index") @db.VarChar(10)
  speedIndex        String? @map("speed_index") @db.Char(1)
  type              String? @db.VarChar(50)
  season            season?
  diskProtection    String? @map("disk_protection") @db.VarChar(50)
  rof               String? @db.VarChar(50)

  brands            Brand?  @relation(fields: [brandId], references: [id], onUpdate: NoAction)
  models            Model?  @relation(fields: [modelId], references: [id], onUpdate: NoAction)
  orders Order[]

  @@index([title(ops: raw("gin_trgm_ops"))], map: "tyres_title_trgm_idx", type: Gin)
  @@map("tyres")
}

model Model {
  id          Int          @id @default(autoincrement())
  slug        String       @unique @db.VarChar(200)
  name        String
  description String?
  brandId     Int?          @map("brand_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @default(now()) @map("updated_at")
  season      season?
  images      ModelImage[]
  brand       Brand?        @relation(fields: [brandId], references: [id], onDelete: Cascade)
  tyres       Tyre[]

  @@index([brandId])
  @@map("models")
}

model Message {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String?
  message   String
  createdAt DateTime @default(now())

  @@map("messages")
}

model ModelImage {
  id       Int     @id @default(autoincrement())
  modelId  Int     @map("model_id")
  url      String
  alt      String?
  width    Int?
  height   Int?
  position Int     @default(0)
  model    Model   @relation(fields: [modelId], references: [id])

  @@index([modelId])
  @@map("model_images")
}

model ContentBlock {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value Json

  @@map("content_blocks")
}

model StaticPage {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  content     String
  description String?
  visible     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  @@map("static_page")
}

enum season {
  SUMMER
  WINTER
  ALLSEASON
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  tyreId    Int
  tyreTitle String
  tyreSize  String
  tyrePrice Int
  quantity  Int

  name    String
  phone   String
  email   String?
  comment String?
  status  String?  @default("pending")

  tyre Tyre @relation(fields: [tyreId], references: [id])

  @@map("orders")
}

model TyreImport {
  id          Int     @id @default(autoincrement())
  externalId String   // поле id з 1С
  name       String
  code       String   // артикул
  price      Int
  quantity   Int

  model            String?
  manufacturer     String?
  yearOfProduction String?
  season           String?
  typeSize         String?
  diameter         String?
  load             String?
  speed            String?
  additionalIndex  String?
  applicability    String?
  diskProtection   String?
  country          String?
  rof              String?

  itemType    String?
  raw         Json?     // повний оригінальний запис
  processed   Boolean   @default(false)
  importedAt  DateTime  @default(now())
  
  @@map("tyre_import")
}
