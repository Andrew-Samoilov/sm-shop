import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST(req: Request) {
  try {
    const body = await req.json();
    // console.info("üì• –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:", body);

    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è —î
    const name = body.contact_name?.trim();
    const email = body.contact_email?.trim();
    const phone = body.contact_tel?.trim() || null;
    const message = body.contact_message?.trim();

    if (!message) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –û–±–æ–≤—è–∑–∫–æ–≤–µ –ø–æ–ª–µ message –ù–ï –ø–µ—Ä–µ–¥–∞–Ω–æ.");
      return NextResponse.json(
        { success: false, error: "–ó–∞–ø–æ–≤–Ω—ñ—Å—Ç—å –ø–æ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" },
        { status: 400 },
      );
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
    const newMessage = await prisma.messages.create({
      data: { name, email, phone, message },
    });

    if (process.env.NODE_ENV === "development") {
      console.info("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ:", newMessage);
    }

    return NextResponse.json({ success: true, data: newMessage });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ API:", error);
    return NextResponse.json(
      { success: false, error: "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" },
      { status: 500 },
    );
  }
}
